// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.12.4
// source: deck/deck.proto

package deck

import (
	card "github.com/stevezaluk/mtgjson-models/card"
	meta "github.com/stevezaluk/mtgjson-models/meta"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Deck - Represents an MTGJSON deck
//
// See here for more info: https://mtgjson.com/data-models/deck
//
// This model has been changed slightly from the original model to seperate out lists for
// both the card ids and for cards themselves. This way we can store just the ID's in the database
// and fill the contents field before it gets returned to the user
type Deck struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Name           string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" bson:"name"`                     // @gotags: bson:"name"
	Code           string                 `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty" bson:"code"`                     // @gotags: bson:"code"
	Type           string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty" bson:"type"`                     // @gotags: bson:"type"
	ReleaseDate    string                 `protobuf:"bytes,4,opt,name=releaseDate,proto3" json:"releaseDate,omitempty" bson:"releaseDate"`       // @gotags: bson:"releaseDate"
	Contents       *DeckContents          `protobuf:"bytes,5,opt,name=contents,proto3" json:"contents,omitempty" bson:"contents"`             // @gotags: bson:"contents"
	MtgjsonApiMeta *meta.MTGJSONAPIMeta   `protobuf:"bytes,6,opt,name=mtgjsonApiMeta,proto3" json:"mtgjsonApiMeta,omitempty" bson:"mtgjsonApiMeta"` // @gotags: bson:"mtgjsonApiMeta"
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Deck) Reset() {
	*x = Deck{}
	mi := &file_deck_deck_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Deck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deck) ProtoMessage() {}

func (x *Deck) ProtoReflect() protoreflect.Message {
	mi := &file_deck_deck_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deck.ProtoReflect.Descriptor instead.
func (*Deck) Descriptor() ([]byte, []int) {
	return file_deck_deck_proto_rawDescGZIP(), []int{0}
}

func (x *Deck) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Deck) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Deck) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Deck) GetReleaseDate() string {
	if x != nil {
		return x.ReleaseDate
	}
	return ""
}

func (x *Deck) GetContents() *DeckContents {
	if x != nil {
		return x.Contents
	}
	return nil
}

func (x *Deck) GetMtgjsonApiMeta() *meta.MTGJSONAPIMeta {
	if x != nil {
		return x.MtgjsonApiMeta
	}
	return nil
}

// DeckContents - Represents the contents of a deck. Each board is stored here
type DeckContents struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Commander     []*DeckContentEntry    `protobuf:"bytes,1,rep,name=commander,proto3" json:"commander,omitempty"` // gotags: bson:"commander"
	MainBoard     []*DeckContentEntry    `protobuf:"bytes,2,rep,name=mainBoard,proto3" json:"mainBoard,omitempty" bson:"mainBoard"` // @gotags: bson:"mainBoard"
	SideBoard     []*DeckContentEntry    `protobuf:"bytes,3,rep,name=sideBoard,proto3" json:"sideBoard,omitempty" bson:"sideBoard"` // @gotags: bson:"sideBoard"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeckContents) Reset() {
	*x = DeckContents{}
	mi := &file_deck_deck_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeckContents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeckContents) ProtoMessage() {}

func (x *DeckContents) ProtoReflect() protoreflect.Message {
	mi := &file_deck_deck_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeckContents.ProtoReflect.Descriptor instead.
func (*DeckContents) Descriptor() ([]byte, []int) {
	return file_deck_deck_proto_rawDescGZIP(), []int{1}
}

func (x *DeckContents) GetCommander() []*DeckContentEntry {
	if x != nil {
		return x.Commander
	}
	return nil
}

func (x *DeckContents) GetMainBoard() []*DeckContentEntry {
	if x != nil {
		return x.MainBoard
	}
	return nil
}

func (x *DeckContents) GetSideBoard() []*DeckContentEntry {
	if x != nil {
		return x.SideBoard
	}
	return nil
}

// DeckContentEntry - Represents a single entry within a deck's board. The card field
// is left nil when stored within the database and is filled in during call time. This is
// to ensure there are not duplicated models across the database
type DeckContentEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Quantity      int64                  `protobuf:"varint,1,opt,name=quantity,proto3" json:"quantity,omitempty" bson:"quantity"`      // @gotags: bson:"quantity"
	MtgjsonV4Id   string                 `protobuf:"bytes,2,opt,name=mtgjsonV4Id,proto3" json:"mtgjsonV4Id,omitempty" bson:"mtgjsonV4Id"` // @gotags: bson:"mtgjsonV4Id"
	Card          []*card.CardSet        `protobuf:"bytes,3,rep,name=card,proto3" json:"card,omitempty" bson:"card"`               // @gotags: bson:"card"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeckContentEntry) Reset() {
	*x = DeckContentEntry{}
	mi := &file_deck_deck_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeckContentEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeckContentEntry) ProtoMessage() {}

func (x *DeckContentEntry) ProtoReflect() protoreflect.Message {
	mi := &file_deck_deck_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeckContentEntry.ProtoReflect.Descriptor instead.
func (*DeckContentEntry) Descriptor() ([]byte, []int) {
	return file_deck_deck_proto_rawDescGZIP(), []int{2}
}

func (x *DeckContentEntry) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *DeckContentEntry) GetMtgjsonV4Id() string {
	if x != nil {
		return x.MtgjsonV4Id
	}
	return ""
}

func (x *DeckContentEntry) GetCard() []*card.CardSet {
	if x != nil {
		return x.Card
	}
	return nil
}

var File_deck_deck_proto protoreflect.FileDescriptor

const file_deck_deck_proto_rawDesc = "" +
	"\n" +
	"\x0fdeck/deck.proto\x12\x04deck\x1a\x13card/card_set.proto\x1a\x16meta/mtgjson_api.proto\"\xd2\x01\n" +
	"\x04Deck\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n" +
	"\x04code\x18\x02 \x01(\tR\x04code\x12\x12\n" +
	"\x04type\x18\x03 \x01(\tR\x04type\x12 \n" +
	"\vreleaseDate\x18\x04 \x01(\tR\vreleaseDate\x12.\n" +
	"\bcontents\x18\x05 \x01(\v2\x12.deck.DeckContentsR\bcontents\x12<\n" +
	"\x0emtgjsonApiMeta\x18\x06 \x01(\v2\x14.meta.MTGJSONAPIMetaR\x0emtgjsonApiMeta\"\xb0\x01\n" +
	"\fDeckContents\x124\n" +
	"\tcommander\x18\x01 \x03(\v2\x16.deck.DeckContentEntryR\tcommander\x124\n" +
	"\tmainBoard\x18\x02 \x03(\v2\x16.deck.DeckContentEntryR\tmainBoard\x124\n" +
	"\tsideBoard\x18\x03 \x03(\v2\x16.deck.DeckContentEntryR\tsideBoard\"s\n" +
	"\x10DeckContentEntry\x12\x1a\n" +
	"\bquantity\x18\x01 \x01(\x03R\bquantity\x12 \n" +
	"\vmtgjsonV4Id\x18\x02 \x01(\tR\vmtgjsonV4Id\x12!\n" +
	"\x04card\x18\x03 \x03(\v2\r.card.CardSetR\x04cardB+Z)github.com/stevezaluk/mtgjson-models/deckb\x06proto3"

var (
	file_deck_deck_proto_rawDescOnce sync.Once
	file_deck_deck_proto_rawDescData []byte
)

func file_deck_deck_proto_rawDescGZIP() []byte {
	file_deck_deck_proto_rawDescOnce.Do(func() {
		file_deck_deck_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_deck_deck_proto_rawDesc), len(file_deck_deck_proto_rawDesc)))
	})
	return file_deck_deck_proto_rawDescData
}

var file_deck_deck_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_deck_deck_proto_goTypes = []any{
	(*Deck)(nil),                // 0: deck.Deck
	(*DeckContents)(nil),        // 1: deck.DeckContents
	(*DeckContentEntry)(nil),    // 2: deck.DeckContentEntry
	(*meta.MTGJSONAPIMeta)(nil), // 3: meta.MTGJSONAPIMeta
	(*card.CardSet)(nil),        // 4: card.CardSet
}
var file_deck_deck_proto_depIdxs = []int32{
	1, // 0: deck.Deck.contents:type_name -> deck.DeckContents
	3, // 1: deck.Deck.mtgjsonApiMeta:type_name -> meta.MTGJSONAPIMeta
	2, // 2: deck.DeckContents.commander:type_name -> deck.DeckContentEntry
	2, // 3: deck.DeckContents.mainBoard:type_name -> deck.DeckContentEntry
	2, // 4: deck.DeckContents.sideBoard:type_name -> deck.DeckContentEntry
	4, // 5: deck.DeckContentEntry.card:type_name -> card.CardSet
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_deck_deck_proto_init() }
func file_deck_deck_proto_init() {
	if File_deck_deck_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_deck_deck_proto_rawDesc), len(file_deck_deck_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_deck_deck_proto_goTypes,
		DependencyIndexes: file_deck_deck_proto_depIdxs,
		MessageInfos:      file_deck_deck_proto_msgTypes,
	}.Build()
	File_deck_deck_proto = out.File
	file_deck_deck_proto_goTypes = nil
	file_deck_deck_proto_depIdxs = nil
}
