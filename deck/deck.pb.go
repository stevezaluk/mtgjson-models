// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v3.6.1
// source: deck/deck.proto

package deck

import (
	card "./mtgjson-models/card"
	meta "./mtgjson-models/meta"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Deck - Represents an MTGJSON deck
//
// See here for more info: https://mtgjson.com/data-models/deck
//
// This model has been changed slightly from the original model to seperate out lists for
// both the card ids and for cards themselves. This way we can store just the ID's in the database
// and fill the contents field before it gets returned to the user
type Deck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Code           string               `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Type           string               `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	ReleaseDate    string               `protobuf:"bytes,4,opt,name=releaseDate,proto3" json:"releaseDate,omitempty"`
	ContentIds     *DeckContentIds      `protobuf:"bytes,5,opt,name=contentIds,proto3" json:"contentIds,omitempty"`
	Contents       *DeckContents        `protobuf:"bytes,6,opt,name=contents,proto3" json:"contents,omitempty"`
	MtgjsonApiMeta *meta.MTGJSONAPIMeta `protobuf:"bytes,7,opt,name=mtgjsonApiMeta,proto3" json:"mtgjsonApiMeta,omitempty"`
}

func (x *Deck) Reset() {
	*x = Deck{}
	mi := &file_deck_deck_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Deck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deck) ProtoMessage() {}

func (x *Deck) ProtoReflect() protoreflect.Message {
	mi := &file_deck_deck_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deck.ProtoReflect.Descriptor instead.
func (*Deck) Descriptor() ([]byte, []int) {
	return file_deck_deck_proto_rawDescGZIP(), []int{0}
}

func (x *Deck) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Deck) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Deck) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Deck) GetReleaseDate() string {
	if x != nil {
		return x.ReleaseDate
	}
	return ""
}

func (x *Deck) GetContentIds() *DeckContentIds {
	if x != nil {
		return x.ContentIds
	}
	return nil
}

func (x *Deck) GetContents() *DeckContents {
	if x != nil {
		return x.Contents
	}
	return nil
}

func (x *Deck) GetMtgjsonApiMeta() *meta.MTGJSONAPIMeta {
	if x != nil {
		return x.MtgjsonApiMeta
	}
	return nil
}

// DeckContentIds - Represents the MTGJSON v4 ID's that make up a deck
type DeckContentIds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MainBoard []string `protobuf:"bytes,1,rep,name=mainBoard,proto3" json:"mainBoard,omitempty"`
	SideBoard []string `protobuf:"bytes,2,rep,name=sideBoard,proto3" json:"sideBoard,omitempty"`
	Commander []string `protobuf:"bytes,3,rep,name=commander,proto3" json:"commander,omitempty"`
}

func (x *DeckContentIds) Reset() {
	*x = DeckContentIds{}
	mi := &file_deck_deck_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeckContentIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeckContentIds) ProtoMessage() {}

func (x *DeckContentIds) ProtoReflect() protoreflect.Message {
	mi := &file_deck_deck_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeckContentIds.ProtoReflect.Descriptor instead.
func (*DeckContentIds) Descriptor() ([]byte, []int) {
	return file_deck_deck_proto_rawDescGZIP(), []int{1}
}

func (x *DeckContentIds) GetMainBoard() []string {
	if x != nil {
		return x.MainBoard
	}
	return nil
}

func (x *DeckContentIds) GetSideBoard() []string {
	if x != nil {
		return x.SideBoard
	}
	return nil
}

func (x *DeckContentIds) GetCommander() []string {
	if x != nil {
		return x.Commander
	}
	return nil
}

// DeckContents - Represents the MTGJSON Cards of the decks and its boards
type DeckContents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MainBoard []*card.CardSet `protobuf:"bytes,1,rep,name=mainBoard,proto3" json:"mainBoard,omitempty"`
	SideBoard []*card.CardSet `protobuf:"bytes,2,rep,name=sideBoard,proto3" json:"sideBoard,omitempty"`
	Commander []*card.CardSet `protobuf:"bytes,3,rep,name=commander,proto3" json:"commander,omitempty"`
}

func (x *DeckContents) Reset() {
	*x = DeckContents{}
	mi := &file_deck_deck_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeckContents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeckContents) ProtoMessage() {}

func (x *DeckContents) ProtoReflect() protoreflect.Message {
	mi := &file_deck_deck_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeckContents.ProtoReflect.Descriptor instead.
func (*DeckContents) Descriptor() ([]byte, []int) {
	return file_deck_deck_proto_rawDescGZIP(), []int{2}
}

func (x *DeckContents) GetMainBoard() []*card.CardSet {
	if x != nil {
		return x.MainBoard
	}
	return nil
}

func (x *DeckContents) GetSideBoard() []*card.CardSet {
	if x != nil {
		return x.SideBoard
	}
	return nil
}

func (x *DeckContents) GetCommander() []*card.CardSet {
	if x != nil {
		return x.Commander
	}
	return nil
}

var File_deck_deck_proto protoreflect.FileDescriptor

var file_deck_deck_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x64, 0x65, 0x63, 0x6b, 0x2f, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x04, 0x64, 0x65, 0x63, 0x6b, 0x1a, 0x13, 0x63, 0x61, 0x72, 0x64, 0x2f, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x6d, 0x65,
	0x74, 0x61, 0x2f, 0x6d, 0x74, 0x67, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x88, 0x02, 0x0a, 0x04, 0x44, 0x65, 0x63, 0x6b, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x73, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x73, 0x12, 0x2e, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x6b, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x3c, 0x0a, 0x0e, 0x6d, 0x74, 0x67, 0x6a, 0x73, 0x6f, 0x6e, 0x41, 0x70, 0x69, 0x4d,
	0x65, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x2e, 0x4d, 0x54, 0x47, 0x4a, 0x53, 0x4f, 0x4e, 0x41, 0x50, 0x49, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x0e, 0x6d, 0x74, 0x67, 0x6a, 0x73, 0x6f, 0x6e, 0x41, 0x70, 0x69, 0x4d, 0x65, 0x74, 0x61, 0x22,
	0x6a, 0x0a, 0x0e, 0x44, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x69, 0x6e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x69, 0x6e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x69, 0x64, 0x65, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x64, 0x65, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x22, 0x95, 0x01, 0x0a, 0x0c,
	0x44, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x09,
	0x6d, 0x61, 0x69, 0x6e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x52, 0x09,
	0x6d, 0x61, 0x69, 0x6e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x2b, 0x0a, 0x09, 0x73, 0x69, 0x64,
	0x65, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63,
	0x61, 0x72, 0x64, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x52, 0x09, 0x73, 0x69, 0x64,
	0x65, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x61, 0x72, 0x64,
	0x2e, 0x43, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x65, 0x72, 0x42, 0x17, 0x5a, 0x15, 0x2e, 0x2f, 0x6d, 0x74, 0x67, 0x6a, 0x73, 0x6f, 0x6e,
	0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x64, 0x65, 0x63, 0x6b, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_deck_deck_proto_rawDescOnce sync.Once
	file_deck_deck_proto_rawDescData = file_deck_deck_proto_rawDesc
)

func file_deck_deck_proto_rawDescGZIP() []byte {
	file_deck_deck_proto_rawDescOnce.Do(func() {
		file_deck_deck_proto_rawDescData = protoimpl.X.CompressGZIP(file_deck_deck_proto_rawDescData)
	})
	return file_deck_deck_proto_rawDescData
}

var file_deck_deck_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_deck_deck_proto_goTypes = []any{
	(*Deck)(nil),                // 0: deck.Deck
	(*DeckContentIds)(nil),      // 1: deck.DeckContentIds
	(*DeckContents)(nil),        // 2: deck.DeckContents
	(*meta.MTGJSONAPIMeta)(nil), // 3: meta.MTGJSONAPIMeta
	(*card.CardSet)(nil),        // 4: card.CardSet
}
var file_deck_deck_proto_depIdxs = []int32{
	1, // 0: deck.Deck.contentIds:type_name -> deck.DeckContentIds
	2, // 1: deck.Deck.contents:type_name -> deck.DeckContents
	3, // 2: deck.Deck.mtgjsonApiMeta:type_name -> meta.MTGJSONAPIMeta
	4, // 3: deck.DeckContents.mainBoard:type_name -> card.CardSet
	4, // 4: deck.DeckContents.sideBoard:type_name -> card.CardSet
	4, // 5: deck.DeckContents.commander:type_name -> card.CardSet
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_deck_deck_proto_init() }
func file_deck_deck_proto_init() {
	if File_deck_deck_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_deck_deck_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_deck_deck_proto_goTypes,
		DependencyIndexes: file_deck_deck_proto_depIdxs,
		MessageInfos:      file_deck_deck_proto_msgTypes,
	}.Build()
	File_deck_deck_proto = out.File
	file_deck_deck_proto_rawDesc = nil
	file_deck_deck_proto_goTypes = nil
	file_deck_deck_proto_depIdxs = nil
}
