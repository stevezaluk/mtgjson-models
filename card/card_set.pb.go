// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v3.6.1
// source: card/card_set.proto

package card

import (
	meta "./mtgjson-models/meta"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CardSet - Represents a card within a Magic: The Gathering set
// See here for more info: https://mtgjson.com/data-models/card/card-set/
type CardSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AsciiName               string                 `protobuf:"bytes,1,opt,name=asciiName,proto3" json:"asciiName,omitempty"`
	AttractionLights        []string               `protobuf:"bytes,2,rep,name=attractionLights,proto3" json:"attractionLights,omitempty"`
	ColorIdentity           []string               `protobuf:"bytes,3,rep,name=colorIdentity,proto3" json:"colorIdentity,omitempty"`
	ColorIndicator          []string               `protobuf:"bytes,4,rep,name=colorIndicator,proto3" json:"colorIndicator,omitempty"`
	Colors                  []string               `protobuf:"bytes,5,rep,name=colors,proto3" json:"colors,omitempty"`
	ConvertedManaCost       int64                  `protobuf:"varint,6,opt,name=convertedManaCost,proto3" json:"convertedManaCost,omitempty"`
	Defense                 string                 `protobuf:"bytes,7,opt,name=defense,proto3" json:"defense,omitempty"`
	EdhrecRank              int64                  `protobuf:"varint,8,opt,name=edhrecRank,proto3" json:"edhrecRank,omitempty"`
	EdhrecSaltiness         float32                `protobuf:"fixed32,9,opt,name=edhrecSaltiness,proto3" json:"edhrecSaltiness,omitempty"`
	FaceConvertedManaCost   int64                  `protobuf:"varint,10,opt,name=faceConvertedManaCost,proto3" json:"faceConvertedManaCost,omitempty"`
	FaceManaValue           int64                  `protobuf:"varint,11,opt,name=faceManaValue,proto3" json:"faceManaValue,omitempty"`
	FaceName                string                 `protobuf:"bytes,12,opt,name=faceName,proto3" json:"faceName,omitempty"`
	FirstPrinting           string                 `protobuf:"bytes,13,opt,name=firstPrinting,proto3" json:"firstPrinting,omitempty"`
	ForeignData             *meta.ForeignData      `protobuf:"bytes,14,opt,name=foreignData,proto3" json:"foreignData,omitempty"`
	Hand                    string                 `protobuf:"bytes,15,opt,name=hand,proto3" json:"hand,omitempty"`
	HasAlternativeDeckLimit bool                   `protobuf:"varint,16,opt,name=hasAlternativeDeckLimit,proto3" json:"hasAlternativeDeckLimit,omitempty"`
	Identifiers             *meta.CardIdentifiers  `protobuf:"bytes,17,opt,name=identifiers,proto3" json:"identifiers,omitempty"`
	IsFunny                 bool                   `protobuf:"varint,18,opt,name=isFunny,proto3" json:"isFunny,omitempty"`
	IsReserved              bool                   `protobuf:"varint,19,opt,name=isReserved,proto3" json:"isReserved,omitempty"`
	Keywords                []string               `protobuf:"bytes,20,rep,name=keywords,proto3" json:"keywords,omitempty"`
	Layout                  string                 `protobuf:"bytes,21,opt,name=layout,proto3" json:"layout,omitempty"`
	LeadershipSkills        *meta.LeadershipSkills `protobuf:"bytes,22,opt,name=leadershipSkills,proto3" json:"leadershipSkills,omitempty"`
	Legalities              *meta.CardLegalities   `protobuf:"bytes,23,opt,name=legalities,proto3" json:"legalities,omitempty"`
	Life                    string                 `protobuf:"bytes,24,opt,name=life,proto3" json:"life,omitempty"`
	Loyalty                 string                 `protobuf:"bytes,25,opt,name=loyalty,proto3" json:"loyalty,omitempty"`
	ManaCost                string                 `protobuf:"bytes,26,opt,name=manaCost,proto3" json:"manaCost,omitempty"`
	ManaValue               int64                  `protobuf:"varint,27,opt,name=manaValue,proto3" json:"manaValue,omitempty"`
	Name                    string                 `protobuf:"bytes,28,opt,name=name,proto3" json:"name,omitempty"`
	Power                   string                 `protobuf:"bytes,29,opt,name=power,proto3" json:"power,omitempty"`
	Printings               []string               `protobuf:"bytes,30,rep,name=printings,proto3" json:"printings,omitempty"`
	PurchaseUrls            *meta.PurchaseUrls     `protobuf:"bytes,31,opt,name=purchaseUrls,proto3" json:"purchaseUrls,omitempty"`
	RelatedCards            *meta.RelatedCards     `protobuf:"bytes,32,opt,name=relatedCards,proto3" json:"relatedCards,omitempty"`
	Rulings                 []*meta.CardRulings    `protobuf:"bytes,33,rep,name=rulings,proto3" json:"rulings,omitempty"`
	Side                    string                 `protobuf:"bytes,34,opt,name=side,proto3" json:"side,omitempty"`
	Subsets                 []string               `protobuf:"bytes,35,rep,name=subsets,proto3" json:"subsets,omitempty"`
	Subtypes                []string               `protobuf:"bytes,36,rep,name=subtypes,proto3" json:"subtypes,omitempty"`
	Supertypes              []string               `protobuf:"bytes,37,rep,name=supertypes,proto3" json:"supertypes,omitempty"`
	Text                    string                 `protobuf:"bytes,38,opt,name=text,proto3" json:"text,omitempty"`
	Toughness               string                 `protobuf:"bytes,39,opt,name=toughness,proto3" json:"toughness,omitempty"`
	Type                    string                 `protobuf:"bytes,40,opt,name=type,proto3" json:"type,omitempty"`
	Types                   []string               `protobuf:"bytes,41,rep,name=types,proto3" json:"types,omitempty"`
	Artist                  string                 `protobuf:"bytes,42,opt,name=artist,proto3" json:"artist,omitempty"`
	ArtistIds               []string               `protobuf:"bytes,43,rep,name=artistIds,proto3" json:"artistIds,omitempty"`
	Availability            []string               `protobuf:"bytes,44,rep,name=availability,proto3" json:"availability,omitempty"`
	BoosterTypes            []string               `protobuf:"bytes,45,rep,name=boosterTypes,proto3" json:"boosterTypes,omitempty"`
	BorderColor             string                 `protobuf:"bytes,46,opt,name=borderColor,proto3" json:"borderColor,omitempty"`
	CardParts               []string               `protobuf:"bytes,47,rep,name=cardParts,proto3" json:"cardParts,omitempty"`
	DuelDeck                string                 `protobuf:"bytes,48,opt,name=duelDeck,proto3" json:"duelDeck,omitempty"`
	FaceFlavorName          string                 `protobuf:"bytes,49,opt,name=faceFlavorName,proto3" json:"faceFlavorName,omitempty"`
	Finishes                []string               `protobuf:"bytes,50,rep,name=finishes,proto3" json:"finishes,omitempty"`
	FlavorName              string                 `protobuf:"bytes,51,opt,name=flavorName,proto3" json:"flavorName,omitempty"`
	FrameEffects            []string               `protobuf:"bytes,52,rep,name=frameEffects,proto3" json:"frameEffects,omitempty"`
	HasContentWarning       bool                   `protobuf:"varint,53,opt,name=hasContentWarning,proto3" json:"hasContentWarning,omitempty"`
	HasFoil                 bool                   `protobuf:"varint,54,opt,name=hasFoil,proto3" json:"hasFoil,omitempty"`
	HasNonFoil              bool                   `protobuf:"varint,55,opt,name=hasNonFoil,proto3" json:"hasNonFoil,omitempty"`
	IsAlternative           bool                   `protobuf:"varint,56,opt,name=isAlternative,proto3" json:"isAlternative,omitempty"`
	IsFullArt               bool                   `protobuf:"varint,57,opt,name=isFullArt,proto3" json:"isFullArt,omitempty"`
	IsOnlineOnly            bool                   `protobuf:"varint,58,opt,name=isOnlineOnly,proto3" json:"isOnlineOnly,omitempty"`
	IsOversized             bool                   `protobuf:"varint,59,opt,name=isOversized,proto3" json:"isOversized,omitempty"`
	IsPromo                 bool                   `protobuf:"varint,60,opt,name=isPromo,proto3" json:"isPromo,omitempty"`
	IsRebalanced            bool                   `protobuf:"varint,61,opt,name=isRebalanced,proto3" json:"isRebalanced,omitempty"`
	IsReprint               bool                   `protobuf:"varint,62,opt,name=isReprint,proto3" json:"isReprint,omitempty"`
	IsStarter               bool                   `protobuf:"varint,63,opt,name=isStarter,proto3" json:"isStarter,omitempty"`
	IsStorySpotlight        bool                   `protobuf:"varint,64,opt,name=isStorySpotlight,proto3" json:"isStorySpotlight,omitempty"`
	IsTextless              bool                   `protobuf:"varint,65,opt,name=isTextless,proto3" json:"isTextless,omitempty"`
	IsTimeshifted           bool                   `protobuf:"varint,66,opt,name=isTimeshifted,proto3" json:"isTimeshifted,omitempty"`
	Language                string                 `protobuf:"bytes,67,opt,name=language,proto3" json:"language,omitempty"`
	Number                  string                 `protobuf:"bytes,68,opt,name=number,proto3" json:"number,omitempty"`
	OriginalPrintings       []string               `protobuf:"bytes,69,rep,name=originalPrintings,proto3" json:"originalPrintings,omitempty"`
	OriginalReleaseDate     string                 `protobuf:"bytes,70,opt,name=originalReleaseDate,proto3" json:"originalReleaseDate,omitempty"`
	OriginalText            string                 `protobuf:"bytes,71,opt,name=originalText,proto3" json:"originalText,omitempty"`
	OriginalType            string                 `protobuf:"bytes,72,opt,name=originalType,proto3" json:"originalType,omitempty"`
	OtherFaceIds            []string               `protobuf:"bytes,73,rep,name=otherFaceIds,proto3" json:"otherFaceIds,omitempty"`
	PromoTypes              []string               `protobuf:"bytes,74,rep,name=promoTypes,proto3" json:"promoTypes,omitempty"`
	Rarity                  string                 `protobuf:"bytes,75,opt,name=rarity,proto3" json:"rarity,omitempty"`
	RebalancedPrintings     []string               `protobuf:"bytes,76,rep,name=rebalancedPrintings,proto3" json:"rebalancedPrintings,omitempty"`
	SecurityStamp           string                 `protobuf:"bytes,77,opt,name=securityStamp,proto3" json:"securityStamp,omitempty"`
	SetCode                 string                 `protobuf:"bytes,78,opt,name=setCode,proto3" json:"setCode,omitempty"`
	Signature               string                 `protobuf:"bytes,79,opt,name=signature,proto3" json:"signature,omitempty"`
	SourceProducts          *meta.SourceProducts   `protobuf:"bytes,80,opt,name=sourceProducts,proto3" json:"sourceProducts,omitempty"`
	Uuid                    string                 `protobuf:"bytes,81,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Variations              []string               `protobuf:"bytes,82,rep,name=variations,proto3" json:"variations,omitempty"`
	Watermark               []string               `protobuf:"bytes,83,rep,name=watermark,proto3" json:"watermark,omitempty"`
	MtgjsonApiMeta          *meta.MTGJSONAPIMeta   `protobuf:"bytes,84,opt,name=mtgjsonApiMeta,proto3" json:"mtgjsonApiMeta,omitempty"`
}

func (x *CardSet) Reset() {
	*x = CardSet{}
	mi := &file_card_card_set_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CardSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardSet) ProtoMessage() {}

func (x *CardSet) ProtoReflect() protoreflect.Message {
	mi := &file_card_card_set_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardSet.ProtoReflect.Descriptor instead.
func (*CardSet) Descriptor() ([]byte, []int) {
	return file_card_card_set_proto_rawDescGZIP(), []int{0}
}

func (x *CardSet) GetAsciiName() string {
	if x != nil {
		return x.AsciiName
	}
	return ""
}

func (x *CardSet) GetAttractionLights() []string {
	if x != nil {
		return x.AttractionLights
	}
	return nil
}

func (x *CardSet) GetColorIdentity() []string {
	if x != nil {
		return x.ColorIdentity
	}
	return nil
}

func (x *CardSet) GetColorIndicator() []string {
	if x != nil {
		return x.ColorIndicator
	}
	return nil
}

func (x *CardSet) GetColors() []string {
	if x != nil {
		return x.Colors
	}
	return nil
}

func (x *CardSet) GetConvertedManaCost() int64 {
	if x != nil {
		return x.ConvertedManaCost
	}
	return 0
}

func (x *CardSet) GetDefense() string {
	if x != nil {
		return x.Defense
	}
	return ""
}

func (x *CardSet) GetEdhrecRank() int64 {
	if x != nil {
		return x.EdhrecRank
	}
	return 0
}

func (x *CardSet) GetEdhrecSaltiness() float32 {
	if x != nil {
		return x.EdhrecSaltiness
	}
	return 0
}

func (x *CardSet) GetFaceConvertedManaCost() int64 {
	if x != nil {
		return x.FaceConvertedManaCost
	}
	return 0
}

func (x *CardSet) GetFaceManaValue() int64 {
	if x != nil {
		return x.FaceManaValue
	}
	return 0
}

func (x *CardSet) GetFaceName() string {
	if x != nil {
		return x.FaceName
	}
	return ""
}

func (x *CardSet) GetFirstPrinting() string {
	if x != nil {
		return x.FirstPrinting
	}
	return ""
}

func (x *CardSet) GetForeignData() *meta.ForeignData {
	if x != nil {
		return x.ForeignData
	}
	return nil
}

func (x *CardSet) GetHand() string {
	if x != nil {
		return x.Hand
	}
	return ""
}

func (x *CardSet) GetHasAlternativeDeckLimit() bool {
	if x != nil {
		return x.HasAlternativeDeckLimit
	}
	return false
}

func (x *CardSet) GetIdentifiers() *meta.CardIdentifiers {
	if x != nil {
		return x.Identifiers
	}
	return nil
}

func (x *CardSet) GetIsFunny() bool {
	if x != nil {
		return x.IsFunny
	}
	return false
}

func (x *CardSet) GetIsReserved() bool {
	if x != nil {
		return x.IsReserved
	}
	return false
}

func (x *CardSet) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *CardSet) GetLayout() string {
	if x != nil {
		return x.Layout
	}
	return ""
}

func (x *CardSet) GetLeadershipSkills() *meta.LeadershipSkills {
	if x != nil {
		return x.LeadershipSkills
	}
	return nil
}

func (x *CardSet) GetLegalities() *meta.CardLegalities {
	if x != nil {
		return x.Legalities
	}
	return nil
}

func (x *CardSet) GetLife() string {
	if x != nil {
		return x.Life
	}
	return ""
}

func (x *CardSet) GetLoyalty() string {
	if x != nil {
		return x.Loyalty
	}
	return ""
}

func (x *CardSet) GetManaCost() string {
	if x != nil {
		return x.ManaCost
	}
	return ""
}

func (x *CardSet) GetManaValue() int64 {
	if x != nil {
		return x.ManaValue
	}
	return 0
}

func (x *CardSet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CardSet) GetPower() string {
	if x != nil {
		return x.Power
	}
	return ""
}

func (x *CardSet) GetPrintings() []string {
	if x != nil {
		return x.Printings
	}
	return nil
}

func (x *CardSet) GetPurchaseUrls() *meta.PurchaseUrls {
	if x != nil {
		return x.PurchaseUrls
	}
	return nil
}

func (x *CardSet) GetRelatedCards() *meta.RelatedCards {
	if x != nil {
		return x.RelatedCards
	}
	return nil
}

func (x *CardSet) GetRulings() []*meta.CardRulings {
	if x != nil {
		return x.Rulings
	}
	return nil
}

func (x *CardSet) GetSide() string {
	if x != nil {
		return x.Side
	}
	return ""
}

func (x *CardSet) GetSubsets() []string {
	if x != nil {
		return x.Subsets
	}
	return nil
}

func (x *CardSet) GetSubtypes() []string {
	if x != nil {
		return x.Subtypes
	}
	return nil
}

func (x *CardSet) GetSupertypes() []string {
	if x != nil {
		return x.Supertypes
	}
	return nil
}

func (x *CardSet) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *CardSet) GetToughness() string {
	if x != nil {
		return x.Toughness
	}
	return ""
}

func (x *CardSet) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CardSet) GetTypes() []string {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *CardSet) GetArtist() string {
	if x != nil {
		return x.Artist
	}
	return ""
}

func (x *CardSet) GetArtistIds() []string {
	if x != nil {
		return x.ArtistIds
	}
	return nil
}

func (x *CardSet) GetAvailability() []string {
	if x != nil {
		return x.Availability
	}
	return nil
}

func (x *CardSet) GetBoosterTypes() []string {
	if x != nil {
		return x.BoosterTypes
	}
	return nil
}

func (x *CardSet) GetBorderColor() string {
	if x != nil {
		return x.BorderColor
	}
	return ""
}

func (x *CardSet) GetCardParts() []string {
	if x != nil {
		return x.CardParts
	}
	return nil
}

func (x *CardSet) GetDuelDeck() string {
	if x != nil {
		return x.DuelDeck
	}
	return ""
}

func (x *CardSet) GetFaceFlavorName() string {
	if x != nil {
		return x.FaceFlavorName
	}
	return ""
}

func (x *CardSet) GetFinishes() []string {
	if x != nil {
		return x.Finishes
	}
	return nil
}

func (x *CardSet) GetFlavorName() string {
	if x != nil {
		return x.FlavorName
	}
	return ""
}

func (x *CardSet) GetFrameEffects() []string {
	if x != nil {
		return x.FrameEffects
	}
	return nil
}

func (x *CardSet) GetHasContentWarning() bool {
	if x != nil {
		return x.HasContentWarning
	}
	return false
}

func (x *CardSet) GetHasFoil() bool {
	if x != nil {
		return x.HasFoil
	}
	return false
}

func (x *CardSet) GetHasNonFoil() bool {
	if x != nil {
		return x.HasNonFoil
	}
	return false
}

func (x *CardSet) GetIsAlternative() bool {
	if x != nil {
		return x.IsAlternative
	}
	return false
}

func (x *CardSet) GetIsFullArt() bool {
	if x != nil {
		return x.IsFullArt
	}
	return false
}

func (x *CardSet) GetIsOnlineOnly() bool {
	if x != nil {
		return x.IsOnlineOnly
	}
	return false
}

func (x *CardSet) GetIsOversized() bool {
	if x != nil {
		return x.IsOversized
	}
	return false
}

func (x *CardSet) GetIsPromo() bool {
	if x != nil {
		return x.IsPromo
	}
	return false
}

func (x *CardSet) GetIsRebalanced() bool {
	if x != nil {
		return x.IsRebalanced
	}
	return false
}

func (x *CardSet) GetIsReprint() bool {
	if x != nil {
		return x.IsReprint
	}
	return false
}

func (x *CardSet) GetIsStarter() bool {
	if x != nil {
		return x.IsStarter
	}
	return false
}

func (x *CardSet) GetIsStorySpotlight() bool {
	if x != nil {
		return x.IsStorySpotlight
	}
	return false
}

func (x *CardSet) GetIsTextless() bool {
	if x != nil {
		return x.IsTextless
	}
	return false
}

func (x *CardSet) GetIsTimeshifted() bool {
	if x != nil {
		return x.IsTimeshifted
	}
	return false
}

func (x *CardSet) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *CardSet) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *CardSet) GetOriginalPrintings() []string {
	if x != nil {
		return x.OriginalPrintings
	}
	return nil
}

func (x *CardSet) GetOriginalReleaseDate() string {
	if x != nil {
		return x.OriginalReleaseDate
	}
	return ""
}

func (x *CardSet) GetOriginalText() string {
	if x != nil {
		return x.OriginalText
	}
	return ""
}

func (x *CardSet) GetOriginalType() string {
	if x != nil {
		return x.OriginalType
	}
	return ""
}

func (x *CardSet) GetOtherFaceIds() []string {
	if x != nil {
		return x.OtherFaceIds
	}
	return nil
}

func (x *CardSet) GetPromoTypes() []string {
	if x != nil {
		return x.PromoTypes
	}
	return nil
}

func (x *CardSet) GetRarity() string {
	if x != nil {
		return x.Rarity
	}
	return ""
}

func (x *CardSet) GetRebalancedPrintings() []string {
	if x != nil {
		return x.RebalancedPrintings
	}
	return nil
}

func (x *CardSet) GetSecurityStamp() string {
	if x != nil {
		return x.SecurityStamp
	}
	return ""
}

func (x *CardSet) GetSetCode() string {
	if x != nil {
		return x.SetCode
	}
	return ""
}

func (x *CardSet) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *CardSet) GetSourceProducts() *meta.SourceProducts {
	if x != nil {
		return x.SourceProducts
	}
	return nil
}

func (x *CardSet) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *CardSet) GetVariations() []string {
	if x != nil {
		return x.Variations
	}
	return nil
}

func (x *CardSet) GetWatermark() []string {
	if x != nil {
		return x.Watermark
	}
	return nil
}

func (x *CardSet) GetMtgjsonApiMeta() *meta.MTGJSONAPIMeta {
	if x != nil {
		return x.MtgjsonApiMeta
	}
	return nil
}

var File_card_card_set_proto protoreflect.FileDescriptor

var file_card_card_set_proto_rawDesc = []byte{
	0x0a, 0x13, 0x63, 0x61, 0x72, 0x64, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x63, 0x61, 0x72, 0x64, 0x1a, 0x16, 0x6d, 0x65, 0x74,
	0x61, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x6d, 0x65, 0x74, 0x61,
	0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x70, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17,
	0x6d, 0x65, 0x74, 0x61, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x75, 0x6c, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x6c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a,
	0x6d, 0x65, 0x74, 0x61, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x6d, 0x65, 0x74, 0x61,
	0x2f, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x6d, 0x74, 0x67, 0x6a, 0x73, 0x6f,
	0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf6, 0x16, 0x0a, 0x07,
	0x43, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x73, 0x63, 0x69, 0x69,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x73, 0x63, 0x69,
	0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x74, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x10, 0x61, 0x74, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x6e, 0x61, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x6e,
	0x61, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x65, 0x64, 0x68, 0x72, 0x65, 0x63, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x64, 0x68, 0x72, 0x65, 0x63, 0x52, 0x61, 0x6e, 0x6b, 0x12,
	0x28, 0x0a, 0x0f, 0x65, 0x64, 0x68, 0x72, 0x65, 0x63, 0x53, 0x61, 0x6c, 0x74, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x65, 0x64, 0x68, 0x72, 0x65, 0x63,
	0x53, 0x61, 0x6c, 0x74, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x66, 0x61, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x6e, 0x61, 0x43, 0x6f,
	0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x66, 0x61, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x6e, 0x61, 0x43, 0x6f, 0x73, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x66, 0x61, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x66, 0x61, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x69, 0x72, 0x73, 0x74, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x69, 0x72, 0x73, 0x74, 0x50,
	0x72, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x33, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x65, 0x69,
	0x67, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0b, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x61, 0x6e, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x6e, 0x64,
	0x12, 0x38, 0x0a, 0x17, 0x68, 0x61, 0x73, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x44, 0x65, 0x63, 0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x17, 0x68, 0x61, 0x73, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x44, 0x65, 0x63, 0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x37, 0x0a, 0x0b, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x52, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x46, 0x75, 0x6e, 0x6e, 0x79, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x46, 0x75, 0x6e, 0x6e, 0x79, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x73, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x12, 0x42, 0x0a, 0x10, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x73, 0x52, 0x10, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x34, 0x0a, 0x0a, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x2e, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x0a, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x69, 0x66, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x66, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x6e,
	0x61, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x6e,
	0x61, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x36, 0x0a, 0x0c, 0x70,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x55, 0x72, 0x6c, 0x73, 0x52, 0x0c, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x55,
	0x72, 0x6c, 0x73, 0x12, 0x36, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x0c, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x72,
	0x75, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x07, 0x72, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x62, 0x73, 0x65, 0x74, 0x73, 0x18, 0x23, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x75, 0x62, 0x73, 0x65, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x24, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x70, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x25, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x70, 0x65, 0x72, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x75, 0x67, 0x68, 0x6e,
	0x65, 0x73, 0x73, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x75, 0x67, 0x68,
	0x6e, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x18, 0x29, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x49, 0x64, 0x73, 0x18, 0x2b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x73,
	0x74, 0x49, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x2c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x6f, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x2d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x62, 0x6f, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x2e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x73, 0x18, 0x2f, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x75, 0x65, 0x6c, 0x44, 0x65, 0x63, 0x6b, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x75, 0x65, 0x6c, 0x44, 0x65, 0x63, 0x6b, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x61, 0x63, 0x65,
	0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x66, 0x61, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x73, 0x18, 0x32, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x18, 0x34, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0c, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73,
	0x12, 0x2c, 0x0a, 0x11, 0x68, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x57, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x35, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x68, 0x61, 0x73,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x18,
	0x0a, 0x07, 0x68, 0x61, 0x73, 0x46, 0x6f, 0x69, 0x6c, 0x18, 0x36, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x68, 0x61, 0x73, 0x46, 0x6f, 0x69, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x4e,
	0x6f, 0x6e, 0x46, 0x6f, 0x69, 0x6c, 0x18, 0x37, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x61,
	0x73, 0x4e, 0x6f, 0x6e, 0x46, 0x6f, 0x69, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x73, 0x41, 0x6c,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x69, 0x73, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x73, 0x46, 0x75, 0x6c, 0x6c, 0x41, 0x72, 0x74, 0x18, 0x39, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x69, 0x73, 0x46, 0x75, 0x6c, 0x6c, 0x41, 0x72, 0x74, 0x12, 0x22, 0x0a, 0x0c,
	0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x3a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x6e, 0x6c, 0x79,
	0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x7a, 0x65, 0x64, 0x18,
	0x3b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x7a,
	0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x18, 0x3c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x12, 0x22, 0x0a, 0x0c,
	0x69, 0x73, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x3d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x52, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x3e, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x52, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x72, 0x18, 0x3f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10,
	0x69, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x70, 0x6f, 0x74, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x40, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x53,
	0x70, 0x6f, 0x74, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x54, 0x65,
	0x78, 0x74, 0x6c, 0x65, 0x73, 0x73, 0x18, 0x41, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73,
	0x54, 0x65, 0x78, 0x74, 0x6c, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x73, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x68, 0x69, 0x66, 0x74, 0x65, 0x64, 0x18, 0x42, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x69, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x69, 0x66, 0x74, 0x65, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x43, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x44, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72,
	0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x45, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x30, 0x0a, 0x13, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x65,
	0x78, 0x74, 0x18, 0x47, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x48, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x46, 0x61, 0x63, 0x65, 0x49, 0x64, 0x73, 0x18, 0x49, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x46, 0x61, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x4a, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x65, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x64, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x4c, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x50,
	0x72, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3c, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x51, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x52, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x61, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x53, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x77, 0x61, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x3c, 0x0a, 0x0e, 0x6d, 0x74, 0x67, 0x6a, 0x73, 0x6f,
	0x6e, 0x41, 0x70, 0x69, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x54, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x4d, 0x54, 0x47, 0x4a, 0x53, 0x4f, 0x4e, 0x41, 0x50, 0x49,
	0x4d, 0x65, 0x74, 0x61, 0x52, 0x0e, 0x6d, 0x74, 0x67, 0x6a, 0x73, 0x6f, 0x6e, 0x41, 0x70, 0x69,
	0x4d, 0x65, 0x74, 0x61, 0x42, 0x17, 0x5a, 0x15, 0x2e, 0x2f, 0x6d, 0x74, 0x67, 0x6a, 0x73, 0x6f,
	0x6e, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_card_card_set_proto_rawDescOnce sync.Once
	file_card_card_set_proto_rawDescData = file_card_card_set_proto_rawDesc
)

func file_card_card_set_proto_rawDescGZIP() []byte {
	file_card_card_set_proto_rawDescOnce.Do(func() {
		file_card_card_set_proto_rawDescData = protoimpl.X.CompressGZIP(file_card_card_set_proto_rawDescData)
	})
	return file_card_card_set_proto_rawDescData
}

var file_card_card_set_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_card_card_set_proto_goTypes = []any{
	(*CardSet)(nil),               // 0: card.CardSet
	(*meta.ForeignData)(nil),      // 1: meta.ForeignData
	(*meta.CardIdentifiers)(nil),  // 2: meta.CardIdentifiers
	(*meta.LeadershipSkills)(nil), // 3: meta.LeadershipSkills
	(*meta.CardLegalities)(nil),   // 4: meta.CardLegalities
	(*meta.PurchaseUrls)(nil),     // 5: meta.PurchaseUrls
	(*meta.RelatedCards)(nil),     // 6: meta.RelatedCards
	(*meta.CardRulings)(nil),      // 7: meta.CardRulings
	(*meta.SourceProducts)(nil),   // 8: meta.SourceProducts
	(*meta.MTGJSONAPIMeta)(nil),   // 9: meta.MTGJSONAPIMeta
}
var file_card_card_set_proto_depIdxs = []int32{
	1, // 0: card.CardSet.foreignData:type_name -> meta.ForeignData
	2, // 1: card.CardSet.identifiers:type_name -> meta.CardIdentifiers
	3, // 2: card.CardSet.leadershipSkills:type_name -> meta.LeadershipSkills
	4, // 3: card.CardSet.legalities:type_name -> meta.CardLegalities
	5, // 4: card.CardSet.purchaseUrls:type_name -> meta.PurchaseUrls
	6, // 5: card.CardSet.relatedCards:type_name -> meta.RelatedCards
	7, // 6: card.CardSet.rulings:type_name -> meta.CardRulings
	8, // 7: card.CardSet.sourceProducts:type_name -> meta.SourceProducts
	9, // 8: card.CardSet.mtgjsonApiMeta:type_name -> meta.MTGJSONAPIMeta
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_card_card_set_proto_init() }
func file_card_card_set_proto_init() {
	if File_card_card_set_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_card_card_set_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_card_card_set_proto_goTypes,
		DependencyIndexes: file_card_card_set_proto_depIdxs,
		MessageInfos:      file_card_card_set_proto_msgTypes,
	}.Build()
	File_card_card_set_proto = out.File
	file_card_card_set_proto_rawDesc = nil
	file_card_card_set_proto_goTypes = nil
	file_card_card_set_proto_depIdxs = nil
}
