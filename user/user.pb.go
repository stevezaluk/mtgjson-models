// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v3.6.1
// source: user/user.proto

package user

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// User - Represents an MTGJSON API user. The fields: decks, cards, and sets are a list of
// MTGJSON V4 UUID's that represent the objects that they own
type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username   string          `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Email      string          `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Auth0Id    string          `protobuf:"bytes,3,opt,name=auth0Id,proto3" json:"auth0Id,omitempty"`
	OwnedDecks []string        `protobuf:"bytes,4,rep,name=ownedDecks,proto3" json:"ownedDecks,omitempty"`
	OwnedCards []string        `protobuf:"bytes,5,rep,name=ownedCards,proto3" json:"ownedCards,omitempty"`
	OwnedSets  []string        `protobuf:"bytes,6,rep,name=ownedSets,proto3" json:"ownedSets,omitempty"`
	Stats      *UserStatistics `protobuf:"bytes,7,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	mi := &file_user_user_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{0}
}

func (x *User) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetAuth0Id() string {
	if x != nil {
		return x.Auth0Id
	}
	return ""
}

func (x *User) GetOwnedDecks() []string {
	if x != nil {
		return x.OwnedDecks
	}
	return nil
}

func (x *User) GetOwnedCards() []string {
	if x != nil {
		return x.OwnedCards
	}
	return nil
}

func (x *User) GetOwnedSets() []string {
	if x != nil {
		return x.OwnedSets
	}
	return nil
}

func (x *User) GetStats() *UserStatistics {
	if x != nil {
		return x.Stats
	}
	return nil
}

// UserStatistics - Represents the users MTGJSON API stats and there status for Arcane
type UserStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level            int64   `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Prestige         int64   `protobuf:"varint,2,opt,name=prestige,proto3" json:"prestige,omitempty"`
	XpLeft           int64   `protobuf:"varint,3,opt,name=xpLeft,proto3" json:"xpLeft,omitempty"`
	TotalGamesPlayed int64   `protobuf:"varint,4,opt,name=totalGamesPlayed,proto3" json:"totalGamesPlayed,omitempty"`
	TotalGamesWon    int64   `protobuf:"varint,5,opt,name=totalGamesWon,proto3" json:"totalGamesWon,omitempty"`
	TotalGamesLost   int64   `protobuf:"varint,6,opt,name=totalGamesLost,proto3" json:"totalGamesLost,omitempty"`
	WinLossRatio     float32 `protobuf:"fixed32,7,opt,name=winLossRatio,proto3" json:"winLossRatio,omitempty"`
	TotalDecksOwned  int64   `protobuf:"varint,8,opt,name=totalDecksOwned,proto3" json:"totalDecksOwned,omitempty"`
	TotalSetsOwned   int64   `protobuf:"varint,9,opt,name=totalSetsOwned,proto3" json:"totalSetsOwned,omitempty"`
	TotalCardsOwned  int64   `protobuf:"varint,10,opt,name=totalCardsOwned,proto3" json:"totalCardsOwned,omitempty"`
}

func (x *UserStatistics) Reset() {
	*x = UserStatistics{}
	mi := &file_user_user_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStatistics) ProtoMessage() {}

func (x *UserStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStatistics.ProtoReflect.Descriptor instead.
func (*UserStatistics) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{1}
}

func (x *UserStatistics) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *UserStatistics) GetPrestige() int64 {
	if x != nil {
		return x.Prestige
	}
	return 0
}

func (x *UserStatistics) GetXpLeft() int64 {
	if x != nil {
		return x.XpLeft
	}
	return 0
}

func (x *UserStatistics) GetTotalGamesPlayed() int64 {
	if x != nil {
		return x.TotalGamesPlayed
	}
	return 0
}

func (x *UserStatistics) GetTotalGamesWon() int64 {
	if x != nil {
		return x.TotalGamesWon
	}
	return 0
}

func (x *UserStatistics) GetTotalGamesLost() int64 {
	if x != nil {
		return x.TotalGamesLost
	}
	return 0
}

func (x *UserStatistics) GetWinLossRatio() float32 {
	if x != nil {
		return x.WinLossRatio
	}
	return 0
}

func (x *UserStatistics) GetTotalDecksOwned() int64 {
	if x != nil {
		return x.TotalDecksOwned
	}
	return 0
}

func (x *UserStatistics) GetTotalSetsOwned() int64 {
	if x != nil {
		return x.TotalSetsOwned
	}
	return 0
}

func (x *UserStatistics) GetTotalCardsOwned() int64 {
	if x != nil {
		return x.TotalCardsOwned
	}
	return 0
}

var File_user_user_proto protoreflect.FileDescriptor

var file_user_user_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0xdc, 0x01, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x75, 0x74, 0x68, 0x30, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x30, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x6f, 0x77, 0x6e, 0x65, 0x64, 0x44, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x44, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x6f, 0x77, 0x6e, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x6f, 0x77, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0xf4, 0x02, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x73, 0x74, 0x69, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x72, 0x65, 0x73, 0x74, 0x69, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x78,
	0x70, 0x4c, 0x65, 0x66, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x78, 0x70, 0x4c,
	0x65, 0x66, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x61, 0x6d, 0x65,
	0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x57, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x61, 0x6d,
	0x65, 0x73, 0x57, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x61,
	0x6d, 0x65, 0x73, 0x4c, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x4c, 0x6f, 0x73, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x77, 0x69, 0x6e, 0x4c, 0x6f, 0x73, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0c, 0x77, 0x69, 0x6e, 0x4c, 0x6f, 0x73, 0x73, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x63, 0x6b, 0x73, 0x4f,
	0x77, 0x6e, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x44, 0x65, 0x63, 0x6b, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x73, 0x4f, 0x77,
	0x6e, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x42, 0x17, 0x5a,
	0x15, 0x2e, 0x2f, 0x6d, 0x74, 0x67, 0x6a, 0x73, 0x6f, 0x6e, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_user_user_proto_rawDescOnce sync.Once
	file_user_user_proto_rawDescData = file_user_user_proto_rawDesc
)

func file_user_user_proto_rawDescGZIP() []byte {
	file_user_user_proto_rawDescOnce.Do(func() {
		file_user_user_proto_rawDescData = protoimpl.X.CompressGZIP(file_user_user_proto_rawDescData)
	})
	return file_user_user_proto_rawDescData
}

var file_user_user_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_user_user_proto_goTypes = []any{
	(*User)(nil),           // 0: user.User
	(*UserStatistics)(nil), // 1: user.UserStatistics
}
var file_user_user_proto_depIdxs = []int32{
	1, // 0: user.User.stats:type_name -> user.UserStatistics
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_user_user_proto_init() }
func file_user_user_proto_init() {
	if File_user_user_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_user_user_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_user_user_proto_goTypes,
		DependencyIndexes: file_user_user_proto_depIdxs,
		MessageInfos:      file_user_user_proto_msgTypes,
	}.Build()
	File_user_user_proto = out.File
	file_user_user_proto_rawDesc = nil
	file_user_user_proto_goTypes = nil
	file_user_user_proto_depIdxs = nil
}
